// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createNote = `-- name: CreateNote :one
INSERT INTO notes (nombre, contenido)
VALUES (?, ?)
RETURNING id, nombre, contenido
`

type CreateNoteParams struct {
	Nombre    string         `json:"nombre"`
	Contenido sql.NullString `json:"contenido"`
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, createNote, arg.Nombre, arg.Contenido)
	var i Note
	err := row.Scan(&i.ID, &i.Nombre, &i.Contenido)
	return i, err
}

const createTag = `-- name: CreateTag :one

INSERT INTO tags (nombre, color)
VALUES (?, ?)
RETURNING id, nombre, color
`

type CreateTagParams struct {
	Nombre string         `json:"nombre"`
	Color  sql.NullString `json:"color"`
}

// sql/queries/query.sql
func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag, arg.Nombre, arg.Color)
	var i Tag
	err := row.Scan(&i.ID, &i.Nombre, &i.Color)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password_hash)
VALUES (?, ?)
RETURNING id, username, password_hash
`

type CreateUserParams struct {
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.PasswordHash)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.PasswordHash)
	return i, err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes
WHERE id = ?
`

func (q *Queries) DeleteNote(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNote, id)
	return err
}

const getNote = `-- name: GetNote :one
SELECT id, nombre, contenido FROM notes
WHERE id = ? LIMIT 1
`

func (q *Queries) GetNote(ctx context.Context, id int64) (Note, error) {
	row := q.db.QueryRowContext(ctx, getNote, id)
	var i Note
	err := row.Scan(&i.ID, &i.Nombre, &i.Contenido)
	return i, err
}

const getTag = `-- name: GetTag :one
SELECT id, nombre, color FROM tags
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTag(ctx context.Context, id int64) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTag, id)
	var i Tag
	err := row.Scan(&i.ID, &i.Nombre, &i.Color)
	return i, err
}

const getTagsForNote = `-- name: GetTagsForNote :many
SELECT t.id, t.nombre, t.color FROM tags t
JOIN note_tags nt ON t.id = nt.tag_id
WHERE nt.note_id = ?
`

func (q *Queries) GetTagsForNote(ctx context.Context, noteID int64) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsForNote, noteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Nombre, &i.Color); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash FROM users
WHERE username = ? LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.PasswordHash)
	return i, err
}

const linkTagToNote = `-- name: LinkTagToNote :exec
INSERT INTO note_tags (note_id, tag_id)
VALUES (?, ?)
`

type LinkTagToNoteParams struct {
	NoteID int64 `json:"note_id"`
	TagID  int64 `json:"tag_id"`
}

func (q *Queries) LinkTagToNote(ctx context.Context, arg LinkTagToNoteParams) error {
	_, err := q.db.ExecContext(ctx, linkTagToNote, arg.NoteID, arg.TagID)
	return err
}

const listNotes = `-- name: ListNotes :many
SELECT id, nombre, contenido FROM notes
ORDER BY id DESC
`

func (q *Queries) ListNotes(ctx context.Context) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, listNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(&i.ID, &i.Nombre, &i.Contenido); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNotesWithTags = `-- name: ListNotesWithTags :many
SELECT
    n.id AS note_id,
    n.nombre AS note_nombre,
    n.contenido AS note_contenido,
    t.id AS tag_id,
    t.nombre AS tag_nombre,
    t.color AS tag_color
FROM
    notes n
        LEFT JOIN
    note_tags nt ON n.id = nt.note_id
        LEFT JOIN
    tags t ON nt.tag_id = t.id
ORDER BY
    n.id DESC
`

type ListNotesWithTagsRow struct {
	NoteID        int64          `json:"note_id"`
	NoteNombre    string         `json:"note_nombre"`
	NoteContenido sql.NullString `json:"note_contenido"`
	TagID         sql.NullInt64  `json:"tag_id"`
	TagNombre     sql.NullString `json:"tag_nombre"`
	TagColor      sql.NullString `json:"tag_color"`
}

func (q *Queries) ListNotesWithTags(ctx context.Context) ([]ListNotesWithTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, listNotesWithTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListNotesWithTagsRow
	for rows.Next() {
		var i ListNotesWithTagsRow
		if err := rows.Scan(
			&i.NoteID,
			&i.NoteNombre,
			&i.NoteContenido,
			&i.TagID,
			&i.TagNombre,
			&i.TagColor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT id, nombre, color FROM tags
ORDER BY nombre
`

func (q *Queries) ListTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Nombre, &i.Color); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unlinkTagsFromNote = `-- name: UnlinkTagsFromNote :exec
DELETE FROM note_tags
WHERE note_id = ?
`

func (q *Queries) UnlinkTagsFromNote(ctx context.Context, noteID int64) error {
	_, err := q.db.ExecContext(ctx, unlinkTagsFromNote, noteID)
	return err
}

const updateNote = `-- name: UpdateNote :exec
UPDATE notes
SET nombre = ?, contenido = ?
WHERE id = ?
`

type UpdateNoteParams struct {
	Nombre    string         `json:"nombre"`
	Contenido sql.NullString `json:"contenido"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) error {
	_, err := q.db.ExecContext(ctx, updateNote, arg.Nombre, arg.Contenido, arg.ID)
	return err
}
